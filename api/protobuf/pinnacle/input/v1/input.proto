syntax = "proto3";

package pinnacle.input.v1;

import "google/protobuf/empty.proto";
import "pinnacle/util/v1/util.proto";

enum Modifier {
  MODIFIER_UNSPECIFIED = 0;
  MODIFIER_SHIFT = 1;
  MODIFIER_CTRL = 2;
  MODIFIER_ALT = 3;
  MODIFIER_SUPER = 4;
  MODIFIER_ISO_LEVEL3_SHIFT = 5;
  MODIFIER_ISO_LEVEL5_SHIFT = 6;
}

enum Edge {
  EDGE_UNSPECIFIED = 0;
  EDGE_PRESS = 1;
  EDGE_RELEASE = 2;
}

// ========================================= //
// Binds                                     //
// ========================================= //

message Bind {
  repeated Modifier mods = 1;
  repeated Modifier ignore_mods = 2;
  optional string layer_name = 3;
  BindProperties properties = 4;
  oneof bind {
    Keybind key = 6;
    Mousebind mouse = 7;
  }
}

message BindRequest {
  Bind bind = 1;
}
message BindResponse {
  uint32 bind_id = 1;
}

message BindProperties {
  optional string group = 1;
  optional string description = 2;
  optional bool quit = 3;
  optional bool reload_config = 4;
  optional bool allow_when_locked = 5;
}

message SetBindPropertiesRequest {
  uint32 bind_id = 1;
  BindProperties properties = 2;
}

// A key for a keybind.
// At least one of the two fields must be specified.
// If both are specified, the key_code is used.
// This is not a oneof so both fields can be returned as bind info.
message Keybind {
  optional uint32 key_code = 1;
  optional string xkb_name = 2;
}

message KeybindStreamRequest {
  uint32 bind_id = 1;
}
message KeybindStreamResponse {
  Edge edge = 1;
}

message KeybindOnPressRequest {
  uint32 bind_id = 1;
}

// Mousebinds

message Mousebind {
  uint32 button = 1;
}

message MousebindStreamRequest {
  uint32 bind_id = 1;
}
message MousebindStreamResponse {
  Edge edge = 1;
}

message MousebindOnPressRequest {
  uint32 bind_id = 1;
}

///////

message GetBindInfosRequest {}

message GetBindInfosResponse {
  repeated BindInfo bind_infos = 1;
}

message BindInfo {
  uint32 bind_id = 1;
  Bind bind = 2;
}

message GetBindLayerStackRequest {}
message GetBindLayerStackResponse {
  repeated string layer_names = 1;
}

message EnterBindLayerRequest {
  optional string layer_name = 1;
}

// ========================================= //
// Xkeyboard                                 //
// ========================================= //

message SetXkbConfigRequest {
  optional string rules = 1;
  optional string variant = 2;
  optional string layout = 3;
  optional string model = 4;
  optional string options = 5;
}

message SetRepeatRateRequest {
  // How often the key should repeat, in milliseconds
  optional int32 rate = 1;
  // How long the key has to be held down before repeating, in milliseconds
  optional int32 delay = 2;
}

message SetXkbKeymapRequest {
  string keymap = 1;
}

message SwitchXkbLayoutRequest {
  oneof action {
    google.protobuf.Empty next = 1;
    google.protobuf.Empty prev = 2;
    uint32 index = 3;
  }
}

// ========================================= //
// Xcursor                                   //
// ========================================= //

message SetXcursorRequest {
  optional string theme = 1;
  optional uint32 size = 2;
}

// ========================================= //
// Libinput                                  //
// ========================================= //

// The click method defines when to generate software-emulated
// buttons, usually on a device that does not have a specific
// physical button available.
enum ClickMethod {
  CLICK_METHOD_UNSPECIFIED = 0;
  CLICK_METHOD_BUTTON_AREAS = 1;
  CLICK_METHOD_CLICK_FINGER = 2;
}

// Pointer acceleration profile
enum AccelProfile {
  ACCEL_PROFILE_UNSPECIFIED = 0;
  // No acceleration
  ACCEL_PROFILE_FLAT = 1;
  // Acceleration
  ACCEL_PROFILE_ADAPTIVE = 2;
}

// The scroll method of a device selects when to generate scroll axis
// events instead of pointer motion events.
enum ScrollMethod {
  SCROLL_METHOD_UNSPECIFIED = 0;
  SCROLL_METHOD_NO_SCROLL = 1;
  SCROLL_METHOD_TWO_FINGER = 2;
  SCROLL_METHOD_EDGE = 3;
  SCROLL_METHOD_ON_BUTTON_DOWN = 4;
}

// Map 1/2/3 finger taps to buttons
enum TapButtonMap {
  TAP_BUTTON_MAP_UNSPECIFIED = 0;
  // 1 tap = left mouse, 2 = right, 3 = middle
  TAP_BUTTON_MAP_LEFT_RIGHT_MIDDLE = 1;
  // 1 tap = left mouse, 2 = middle, 3 = right
  TAP_BUTTON_MAP_LEFT_MIDDLE_RIGHT = 2;
}

enum SendEventsMode {
  SEND_EVENTS_MODE_UNSPECIFIED = 0;
  SEND_EVENTS_MODE_ENABLED = 1;
  SEND_EVENTS_MODE_DISABLED = 2;
  SEND_EVENTS_MODE_DISABLED_ON_EXTERNAL_MOUSE = 3;
}

message CalibrationMatrix {
  // Exactly 6 floats
  repeated float matrix = 1;
}

message GetDevicesRequest {}
message GetDevicesResponse {
  repeated string device_sysnames = 1;
}

message GetDeviceCapabilitiesRequest {
  string device_sysname = 1;
}
message GetDeviceCapabilitiesResponse {
  bool keyboard = 1;
  bool pointer = 2;
  bool touch = 3;
  bool tablet_tool = 4;
  bool tablet_pad = 5;
  bool gesture = 6;
  bool switch = 7;
}

message GetDeviceInfoRequest {
  string device_sysname = 1;
}
message GetDeviceInfoResponse {
  string name = 1;
  uint32 product_id = 2;
  uint32 vendor_id = 3;
}

enum DeviceType {
  DEVICE_TYPE_UNSPECIFIED = 0;
  DEVICE_TYPE_TOUCHPAD = 1;
  DEVICE_TYPE_TRACKBALL = 2;
  DEVICE_TYPE_TRACKPOINT = 3;
  DEVICE_TYPE_MOUSE = 4;
  DEVICE_TYPE_TABLET = 5;
  DEVICE_TYPE_KEYBOARD = 6;
  DEVICE_TYPE_SWITCH = 7;
}

message GetDeviceTypeRequest {
  string device_sysname = 1;
}
message GetDeviceTypeResponse {
  DeviceType device_type = 1;
}

message SetDeviceLibinputSettingRequest {
  string device_sysname = 1;

  oneof setting {
    AccelProfile accel_profile = 2;
    double accel_speed = 3;
    CalibrationMatrix calibration_matrix = 4;
    ClickMethod click_method = 5;
    // When `true`, the device will be disabled while typing
    // and for a short period after.
    bool disable_while_typing = 6;
    bool left_handed = 7;
    bool middle_emulation = 8;
    uint32 rotation_angle = 9;
    // When the scroll method is set to `SCROLL_METHOD_ON_BUTTON_DOWN`,
    // pointer motion will become scroll motion and
    // the specified button will also not have any press/release events
    // generated.
    uint32 scroll_button = 10;
    // Only applies when the scroll method is `SCROLL_METHOD_ON_BUTTON_DOWN`.
    // When `false`, the scroll button must be held down to button scroll.
    // When `true`, the scroll button toggles scrolling instead.
    bool scroll_button_lock = 11;
    ScrollMethod scroll_method = 12;
    // When `true`, the direction of scrolling will be reversed.
    // Useful for eg. trackpads.
    bool natural_scroll = 13;
    TapButtonMap tap_button_map = 14;
    // Enable or disable double-tap dragging
    bool tap_drag = 15;
    // Enable or disable a timeout that allows tap-drags to continue
    // when the finger is lifted and placed back during a tap-drag
    bool tap_drag_lock = 16;
    // Enable or disable tap-to-click
    bool tap = 17;
    SendEventsMode send_events_mode = 18;
  }
}

message SetDeviceMapTargetRequest {
  string device_sysname = 1;

  oneof target {
    pinnacle.util.v1.Rect region = 2;
    string output_name = 3;
  }
}

service InputService {
  // Binds

  rpc Bind(BindRequest) returns (BindResponse);
  rpc GetBindInfos(GetBindInfosRequest) returns (GetBindInfosResponse);
  rpc SetBindProperties(SetBindPropertiesRequest) returns (google.protobuf.Empty);

  rpc GetBindLayerStack(GetBindLayerStackRequest) returns (GetBindLayerStackResponse);
  rpc EnterBindLayer(EnterBindLayerRequest) returns (google.protobuf.Empty);

  rpc KeybindStream(KeybindStreamRequest) returns (stream KeybindStreamResponse);
  rpc MousebindStream(MousebindStreamRequest) returns (stream MousebindStreamResponse);

  rpc KeybindOnPress(KeybindOnPressRequest) returns (google.protobuf.Empty);
  rpc MousebindOnPress(MousebindOnPressRequest) returns (google.protobuf.Empty);

  // Xkb

  rpc SetXkbConfig(SetXkbConfigRequest) returns (google.protobuf.Empty);
  rpc SetRepeatRate(SetRepeatRateRequest) returns (google.protobuf.Empty);
  rpc SetXkbKeymap(SetXkbKeymapRequest) returns (google.protobuf.Empty);
  rpc SwitchXkbLayout(SwitchXkbLayoutRequest) returns (google.protobuf.Empty);

  // Xcursor

  rpc SetXcursor(SetXcursorRequest) returns (google.protobuf.Empty);

  // Libinput

  rpc GetDevices(GetDevicesRequest) returns (GetDevicesResponse);
  rpc GetDeviceCapabilities(GetDeviceCapabilitiesRequest) returns (GetDeviceCapabilitiesResponse);
  rpc GetDeviceInfo(GetDeviceInfoRequest) returns (GetDeviceInfoResponse);
  rpc GetDeviceType(GetDeviceTypeRequest) returns (GetDeviceTypeResponse);
  rpc SetDeviceLibinputSetting(SetDeviceLibinputSettingRequest) returns (google.protobuf.Empty);
  rpc SetDeviceMapTarget(SetDeviceMapTargetRequest) returns (google.protobuf.Empty);
}
